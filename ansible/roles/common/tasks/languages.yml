---
- name: installation facts
  set_fact:
    pyenv_root: "{{ home_dir }}/.pyenv"
    pyenv_script: "{{ home_dir }}/.pyenv/bin/pyenv"
    nvm_root: "{{ home_dir }}/.nvm"
    nvm_script: "{{ home_dir }}/.nvm/nvm.sh"
    nvm_version: 0.34.0
    python_version: 3.7.2

- name: install minimum necessary tools (centos)
  yum:
    name:
      - https://centos7.iuscommunity.org/ius-release.rpm
      - ruby
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: install ruby and javascript
  apt:
    name:
      - ruby-full
      - nodejs
      - npm
    update_cache: yes
    state: present
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: check if pyenv installed
  command: command -v pyenv
  register: pyenv_check
  ignore_errors: True
  become_user: "{{ username }}"

- name: install pyenv
  become_user: "{{ username }}"
  when: pyenv_check is failed
  block:
  - name: get pyenv automatic installer script
    get_url:
      url: https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer
      dest: /tmp/install_pyenv.sh
      mode: "u+x"
  - name: install pyenv using the automatic installer
    shell: /tmp/install_pyenv.sh
    args:
      creates: "{{ pyenv_script }}"
  - name: configure zsh for pyenv
    blockinfile:
      backup: false
      dest: "{{ home_dir }}/.zshrc"
      marker: "# {mark} ANSIBLE MANAGED BLOCK - pyenv"
      insertafter: "EOF"
      content: |
          export PATH="{{ home_dir }}/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"

- name: configure pyenv
  become_user: "{{ username }}"
  environment:
    SHELL: /bin/zsh
  block:
  - name: install global pyenv version
    shell: |
      source "{{ home_dir}}/.zshrc"
      pyenv install -s {{ python_version }}

  - name: configure global pyenv version
    shell: |
      source "{{ home_dir}}/.zshrc"
      pyenv global {{ python_version }}

  - name: install python support tools globally
    shell: |
      source "{{ home_dir}}/.zshrc"
      pip install pipenv flake8 autopep8

- name: check if nvm installed
  command: command -v nvm
  register: nvm_check
  ignore_errors: True
  become_user: "{{ username }}"

- name: install nvm
  become_user: "{{ username }}"
  when: nvm_check is failed
  block:
  - name: get nvm automatic installer script
    get_url:
      url: "https://raw.githubusercontent.com/creationix/nvm/v{{nvm_version}}/install.sh"
      dest: /tmp/install_nvm.sh
      mode: "u+rx"
  - name: ensure nvm root directory exists
    file:
      path: "{{ nvm_root }}"
      state: directory
      mode: 0755
  - name: install nvm using the automatic installer
    shell: /tmp/install_nvm.sh
    args:
      creates: "{{ nvm_root }}/nvm.sh"
  - name: configure zsh for nvm
    blockinfile:
      backup: false
      dest: "{{ home_dir }}/.zshrc"
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nvm"
      insertafter: "EOF"
      content: |
          export NVM_DIR="{{ nvm_root }}"
          [ -s "{{ nvm_script }}" ] && \. "{{ nvm_script }}"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

- name: configure global nodejs tools
  become_user: "{{ username }}"
  environment:
    SHELL: /bin/zsh
  block:
  - name: install node
    shell: |
      source "{{ home_dir}}/.zshrc"
      nvm install node
    ignore_errors: yes
  - name: make installed node version the default
    shell: |
      source "{{ home_dir}}/.zshrc"
      nvm alias default node
  - name: install nodejs required libraries
    shell: |
      source "{{ home_dir}}/.zshrc"
      npm install -g prettier eslint
